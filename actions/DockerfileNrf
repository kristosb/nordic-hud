FROM ubuntu:22.04 as base
WORKDIR /workdir

ARG sdk_nrf_branch=v2.5-branch
ARG toolchain_version=v2.5.0
ARG sdk_nrf_commit
ARG NORDIC_COMMAND_LINE_TOOLS_VERSION="10-24-0/nrf-command-line-tools-10.24.0"
ARG arch=amd64

ENV DEBIAN_FRONTEND=noninteractive

SHELL [ "/bin/bash", "-euxo", "pipefail", "-c" ]

# gcc-multilib make = Host tools for native_sim build
# python 3.8 is installed by toolchain manager hence older version of libffi is required
RUN apt-get -y update && \
	apt-get -y upgrade && \
	apt-get -y install wget unzip clang-format gcc-multilib make libffi7 && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

# Install toolchain
# Make nrfutil install in a shared location, because when used with GitHub
# Actions, the image will be launched with the home dir mounted from the local
# checkout.
ENV NRFUTIL_HOME=/usr/local/share/nrfutil
RUN wget -q https://developer.nordicsemi.com/.pc-tools/nrfutil/x64-linux/nrfutil && \
	mv nrfutil /usr/local/bin && \
	chmod +x /usr/local/bin/nrfutil && \
	nrfutil install toolchain-manager && \
	nrfutil install toolchain-manager search && \
	nrfutil toolchain-manager install --ncs-version ${toolchain_version} && \
	nrfutil toolchain-manager list && \
	rm -f /root/ncs/downloads/*

#
# ClangFormat
#
RUN wget -qO- https://raw.githubusercontent.com/nrfconnect/sdk-nrf/${sdk_nrf_branch}/.clang-format > /workdir/.clang-format

# Nordic command line tools
# Releases: https://www.nordicsemi.com/Products/Development-tools/nrf-command-line-tools/download
RUN NCLT_BASE=https://nsscprodmedia.blob.core.windows.net/prod/software-and-other-downloads/desktop-software/nrf-command-line-tools/sw/versions-10-x-x && \
	echo "Host architecture: $arch" && \
	NCLT_URL="${NCLT_BASE}/${NORDIC_COMMAND_LINE_TOOLS_VERSION}_linux-amd64.tar.gz" && \
	echo "NCLT_URL=${NCLT_URL}" && \
	mkdir tmp && cd tmp && \
	wget -qO - "${NCLT_URL}" | tar --no-same-owner -xz && \
	mkdir /opt/SEGGER && \
	tar xzf JLink_*.tgz -C /opt/SEGGER && \
	mv /opt/SEGGER/JLink* /opt/SEGGER/JLink && \
	cp -r ./nrf-command-line-tools /opt && \
	ln -s /opt/nrf-command-line-tools/bin/nrfjprog /usr/local/bin/nrfjprog && \
	ln -s /opt/nrf-command-line-tools/bin/mergehex /usr/local/bin/mergehex && \
	cd .. && rm -rf tmp ;

# Prepare image with a ready to use build environment
SHELL ["nrfutil","toolchain-manager","launch","/bin/bash","--","-c"]

# Prepare image with a ready to use build environment
RUN west init -m https://github.com/nrfconnect/sdk-nrf --mr ${sdk_nrf_branch} .
#RUN git checkout ${sdk_nrf_commit}
RUN west update --narrow -o=--depth=1

# Copy project into image
RUN mkdir /workdir/project
COPY ../src /workdir/project/src
COPY ../prj.conf /workdir/project/prj.conf
COPY ../nrf52832_mdk.overlay /workdir/project/nrf52832_mdk.overlay
COPY ../CMakeLists.txt /workdir/project/CMakeLists.txt

# clone definitions for mdbt42 board
RUN git clone https://github.com/kristosb/nordic-boards-mdbt42q.git /workdir/zephyr/boards/arm/mdbt42q_nrf52
# build project and generate a binary
RUN west build --pristine --board mdbt42q_nrf52 --build-dir project/build project/

ENTRYPOINT [ "nrfutil", "toolchain-manager", "launch", "/bin/bash", "--", "/root/entry.sh" ]
COPY ./entry.sh /root/entry.sh